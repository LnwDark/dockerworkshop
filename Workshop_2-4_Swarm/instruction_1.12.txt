For this workshop. We will create new docker-engine for swarm 1.2 with new architecture for demonstration below:

=================
Create docker-engine for LAB Swarm
=================
1. Check/Clean-Up all docker-machine on previous lab with command:

	
	docker-machine stop swarm-mng swarm-node1 swarm-node2 labdocker2
	docker-machine rm swarm-mng swarm-node1 swarm-node2 labdocker2


2. Create docker-engine for lab (for reduce resource consume) with command below:

	docker-machine create --driver=virtualbox --virtualbox-memory=600 swarm-mng
	docker-machine create --driver=virtualbox --virtualbox-memory=600 swarm-node1
	docker-machine create --driver=virtualbox --virtualbox-memory=600 swarm-node2
	docker-machine regenerate-certs swarm-mag swarm-node1 swarm-node2

3. Record ip address of each docker-engine for use in next step: Normally should like below:

D:\certs>docker-machine ls
NAME          ACTIVE   DRIVER       STATE     URL                         SWARM
labdocker     -        virtualbox   Running   tcp://192.168.99.100:2376           v1.12.0-rc4   
swarm-mng     -        virtualbox   Running   tcp://192.168.99.101:2376           v1.12.0-rc4   
swarm-node1   -        virtualbox   Running   tcp://192.168.99.102:2376           v1.12.0-rc4   
swarm-node2   -        virtualbox   Running   tcp://192.168.99.103:2376           v1.12.0-rc4


======================
Initial Swarm Cluster
======================
location: ####swarm-mng####

1. Login to docker-engine and pull image for consul by command: 

	docker swarm init --advertise-addr 192.168.99.101:2377

location: ####swarm-node1####

2. Join node to swarm by command:

	docker swarm join \
    --token SWMTKN-1-316tn4xze2w2zi7jpukxjdyoniu18k0onh5ywrxinzmau8t71f-4750wvm6fqxi8lbd3trlw7pk4 \
    192.168.99.101:2377



location: ####swarm-node2####
3. Join node to swarm by command:

	docker swarm join \
    --token SWMTKN-1-316tn4xze2w2zi7jpukxjdyoniu18k0onh5ywrxinzmau8t71f-4750wvm6fqxi8lbd3trlw7pk4 \
    192.168.99.101:2377

location: ####swarm-mng####
4. Check status of all node that join to swarm cluster by command:

	docker node ls

	

================
Initial Service on Docker Swarm
================
location: ####swarm-mng####

1. Initial docker service for nodes:

	docker service create --name nodejs \
	labdocker/alpineweb:latest node hello.js
2. Check process of container by command: 
	
	docker service ls
	docker service task nodes

3. Scale nodes by command: docker service scale nodejs=5

4. Check latest scale by command: docker service ls

5. Test update service name by command: 

	docker service update nodejs —name nodejsnew
	docker service ls
	docker service task nodejsnew

6. Update reserve/limit CPU by command:

	docker service update --reserve-cpu 2 --limit-cpu 3 nodejsnew
	docker service inspect nodejsnew|more

6. Stop & Remove service by command: docker service rm nodejsnew


===============
Advance running service in swarm: node constrain
===============
location: ####swarm-mng####

1. Run service with Constraint “node.id” as command below:

	docker service create --constraint ‘node.id==d4495w8xwhtjrdmadm05dip6x’ --name nodejs --replicas=5 labdocker/alpineweb:latest node hello.js
	
	docker service tasks nodejs

2. Change service with Constrating “node.hostname” and delete Constraint “node.id” by  command below:

	docker service update --constraint-rm 'node.id==d4495w8xwhtjrdmadm05dip6x' --constraint-add 'node.hostname!=swarm-mng' nodejs

	docker service inspect nodejs|grep update ==> Under complete

	docker service tasks nodejs

	docker service rm nodejs

===============
Advance running service in swarm: custom label on node
===============
location: ####swarm-mng####

1. Add customise label to node in swarm cluster by command: 

	docker node update --label-add 'storage=sas' swarm-mng

	docker node update --label-add 'storage=nvdimm' swarm-node1

	docker node update --label-add 'storage=sata' swarm-node2

2. Check configuration of node by command: 

	docker node inspect swarm-mng|grep storage

	docker node inspect swarm-node1|grep storage

	docker node inspect swarm-node2|grep storage

3. Create service nodejs to running with constraint custom label by command:

	docker service create --constraint ‘node.labels.storage==saa’ --name nodejs --replicas=5 labdocker/alpineweb:latest node hello.js

	docker service tasks nodejs

	docker service rm nodejs


============
Overlay network prove of concept
============
location: ####swarm-mng####

1. Check current network on swarm with command: docker network ls

2. Create new overlay network for swarm with command:

	docker network create --driver overlay --subnet=192.168.100.0/24 swarmnet
	docker network ls

3. Create replica nodes  on difference node for test overlay network with command:

	docker service create --name nodejs --replicas=2 --network-add swarmnet -p 3000:3000 labdocker/alpineweb:latest node hello.js
	
location: ####swarm-mng,swarm-node1, swarm-node2 (upon what node run)####
4. Check IP Address of both container by command:

	docker inspect nodejs1.xx|grep IPAddress 
	docker inspect nodejs2.xx|grep IPAddress 

5. Test access from container "test1" and access to "test2" by command:

	docker exec -it nodejs1.xxx ping 192.168.100.3
	docker exec -it nodejs2.xxx ping 192.168.100.2

6. CleanUp Lab
	docker service nodejs rm

==========
Add Redundancy Swarm Manager
==========
####swarm-mng####

1. Add “swarm-node1” to candidate

2. 
	
==========
Clean Up Lab
==========
location: ####Your PC / Mac Book####
1. Stop/Remove all swarm node by command:

	docker-machine stop swarm-mng swarm-node1 swarm-node2
	docker-machine rm swarm-mng swarm-node1 swarm-node2

location: ####labdocker####
2. Stop consul container by command:

	docker stop consul
	docker rm console

