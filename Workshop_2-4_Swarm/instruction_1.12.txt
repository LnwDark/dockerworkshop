For this workshop. We will create new docker-engine for swarm 1.2 with new architecture for demonstration below:

=================
Create docker-engine for LAB Swarm
=================
1. Check/Clean-Up all docker-machine on previous lab with command:

	docker-machine stop swarm-mng swarm-node1 swarm-node2 labdocker2
	docker-machine rm swarm-mng swarm-node1 swarm-node2 labdocker2


2. Create docker-engine for lab (for reduce resource consume) with command below:

	docker-machine create --driver=virtualbox --virtualbox-memory=600 swarm-mng
	docker-machine create --driver=virtualbox --virtualbox-memory=600 swarm-node1
	docker-machine create --driver=virtualbox --virtualbox-memory=600 swarm-node2
	docker-machine regenerate-certs swarm-mng swarm-node1 swarm-node2

3. Record ip address of each docker-engine for use in next step: Normally should like below:

D:\certs>docker-machine ls
NAME          ACTIVE   DRIVER       STATE     URL                         SWARM
labdocker     -        virtualbox   Running   tcp://192.168.99.100:2376           v1.12.0
swarm-mng     -        virtualbox   Running   tcp://192.168.99.105:2376           v1.12.0
swarm-node1   -        virtualbox   Running   tcp://192.168.99.106:2376           v1.12.0
swarm-node2   -        virtualbox   Running   tcp://192.168.99.107:2376           v1.12.0


======================
Initial Swarm Cluster
======================
location: ####swarm-mng####

1. Initial swarm cluster by command:

	docker swarm init --advertise-addr 192.168.99.105:2377

	====Result=====
	To add a worker to this swarm, run the following command:
    docker swarm join \
    --token SWMTKN-1-111gglk2fk38yiitoxs0zf61wy9c7av12bwza161beglndflp7-a3l9xv0zkz7jlo94a6dtqn8u3 \
    192.168.99.105:2377

To add a manager to this swarm, run the following command:
    docker swarm join \
    --token SWMTKN-1-111gglk2fk38yiitoxs0zf61wy9c7av12bwza161beglndflp7-dfq6imexv051u75y1g8690dw9 \
    192.168.99.105:2377
	===============

location: ####swarm-node1####

2. Join node to swarm by command:

	docker swarm join \
--token SWMTKN-1-111gglk2fk38yiitoxs0zf61wy9c7av12bwza161beglndflp7-a3l9xv0zkz7jlo94a6dtqn8u3 \
192.168.99.105:2377

location: ####swarm-node2####
3. Join node to swarm by command:

	docker swarm join \
--token SWMTKN-1-111gglk2fk38yiitoxs0zf61wy9c7av12bwza161beglndflp7-a3l9xv0zkz7jlo94a6dtqn8u3 \
192.168.99.105:2377


location: ####swarm-mng####
4. Check status of all node that join to swarm cluster by command:

	docker node ls



================
Initial Service on Docker Swarm
================
location: ####swarm-mng####

1. Initial docker service for nodes:

	docker service create --name nodejs \
  labdocker/alpineweb:latest node hello.js
2. Check process of container by command:

	docker service ls
	docker service ps nodejs

3. Scale nodes by command: docker service scale nodejs=5

4. Check latest scale by command: docker service ls

5. Test update service name by command:

	docker service update nodejs --name nodejsnew
	docker service ls
	docker service ps nodejsnew

6. Update reserve/limit CPU by command:

	docker service update --reserve-cpu 2 --limit-cpu 3 nodejsnew
	docker service inspect nodejsnew|more

6. Stop & Remove service by command: docker service rm nodejsnew


===============
Advance running service in swarm: node constrain
===============
location: ####swarm-mng####

1. Run service with Constraint “node.id” as command below <change node id to swarm-mng>:

	docker service create --constraint 'node.id==ajn0duort1dnle1ugtvqnwfcs' --name nodejs --replicas=5 labdocker/alpineweb:latest node hello.js

	docker service ps nodejs

2. Change service with Constrating “node.hostname” and delete Constraint “node.id” by  command below:

	docker service update --constraint-rm 'node.id==ajn0duort1dnle1ugtvqnwfcs' --constraint-add 'node.hostname!=swarm-mng' nodejs

	docker service inspect nodejs|grep update ==> Under complete

	docker service ps nodejs

	docker service rm nodejs

===============
Advance running service in swarm: custom label on node
===============
location: ####swarm-mng####

1. Add customise label to node in swarm cluster by command:

	docker node update --label-add 'storage=sas' swarm-mng

	docker node update --label-add 'storage=nvdimm' swarm-node1

	docker node update --label-add 'storage=sata' swarm-node2

2. Check configuration of node by command:

	docker node inspect swarm-mng|grep storage

	docker node inspect swarm-node1|grep storage

	docker node inspect swarm-node2|grep storage

3. Create service nodejs to running with constraint custom label by command:

	docker service create --constraint 'node.labels.storage==sas' --name nodejs --replicas=5 labdocker/alpineweb:latest node hello.js

	docker service ps nodejs

	docker service rm nodejs


============
Overlay network prove of concept
============
location: ####swarm-mng####

1. Check current network on swarm with command: docker network ls

2. Create new overlay network for swarm with command:

	docker network create --driver overlay --subnet=192.168.100.0/24 swarmnet
	docker network ls

3. Create replica nodes  on difference node for test overlay network with command:

	docker service create --name nodejs --replicas=2 --network swarmnet labdocker/alpineweb:latest node hello.js

location: ####swarm-mng,swarm-node1, swarm-node2 (upon what node run)####
4. Check IP Address of both container by command:

	docker inspect nodejs1.xx|grep IPAddress
	docker inspect nodejs2.xx|grep IPAddress

5. Test access from container "test1" and access to "test2" by command:

	docker exec -it nodejs1.xxx ping 192.168.100.3
	docker exec -it nodejs2.xxx ping 192.168.100.2

6. CleanUp Lab
	docker service rm nodejs rm

	===========================
	Swarm Scale IPVS (IP Virtual Host) for NODEJS
	===========================
	1. Create overlay network call "nodejsinternal" for contain all nodejs by command:

	docker network create --driver overlay --subnet=192.168.100.0/24 nodejsnet

	2. Create nodejs's service with 1 repica:

	docker service create --name nodejs -p 3000:3000/tcp \
	--network nodejsnet labdocker/alpineweb:latest node hello.js

	3. Check service status by command: docker service ls

	4. Check location of service nodejs by command: docker service ps nodejs

	5. Inspect IP Address of service by command: docker service inspect nodejs|more

	6. Access to node who run container and inspect container ip by command:

	  docker inspect <container id> |grep IPAddress

	7. Compare 5 - 6:

	8. Test access nodejs web server via publish port by Web Browser:

	  http://<swarm-mng>:3000
	  http://<swarm-node1>:3000
	  http://<swarm-node2>:3000

	9. Test ScaleUp service by command: docker service scale nodejs=10

	10. Check and compare ip address for all docker container/service by command:

	  docker service ps nodejs
	  docker inspect <container id> |grep IPAddress

	11. Update service by remove port 3000 publish by command:

	  docker service update --publish-rm 3000 nodejs

	12. Cleanup lab by command:

	  docker service rm nodejs
	  docker network rm nodejsnet

==========
Add Redundancy Swarm Manager
==========
####labdocker####

1. Add “labdocker” to candidate manager by command:

docker swarm join \
--token SWMTKN-1-111gglk2fk38yiitoxs0zf61wy9c7av12bwza161beglndflp7-dfq6imexv051u75y1g8690dw9 \
192.168.99.105:2377


2. Check state of swarm node by command: docker node ls

3. Up existing node “swarm-node1” to manager by command:

	docker node update --role manager swarm-node1

	docker node ls

####swarm-mng####

4. Shutdown swarm-mag by command: sudo shutdown -h now

####swarm-node1####
5. Check swarm cluster status by command: docker node ls

####PC####
6. Start up “swarm-mag” by command: docker-machine start swarm-mag

####swarm-mng####
7. Check swarm cluster status by command: docker node ls



==========
Remove Manager / Worker from Swarm Cluster
==========

####swarm-mng or swarm-node1####
1. Remove role manager from “labdocker” and drain node by command:

	docker node update --role worker labdocker

	docker node update --availability drain labdocker

	docker node ls

####labdocker####
2. Leave from swarm cluster by command: docker swarm leave

####swarm-mng or swarm-node1####
3. Check node status of “labdocker” by command: docker node ls

4. After node status “Down” we can remove node by command: docker node rm labdocker

==========
Clean Up
==========
1. Docker machine stop/remove all machine by command:

	docker-machine stop swarm-mng swarm-node1 swarm-node2
	docker-machine rm swarm-mng swarm-node1 swarm-node2
